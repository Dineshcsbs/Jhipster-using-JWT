package com.crud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WorkersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkersAllPropertiesEquals(Workers expected, Workers actual) {
        assertWorkersAutoGeneratedPropertiesEquals(expected, actual);
        assertWorkersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkersAllUpdatablePropertiesEquals(Workers expected, Workers actual) {
        assertWorkersUpdatableFieldsEquals(expected, actual);
        assertWorkersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkersAutoGeneratedPropertiesEquals(Workers expected, Workers actual) {
        assertThat(expected)
            .as("Verify Workers auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkersUpdatableFieldsEquals(Workers expected, Workers actual) {
        assertThat(expected)
            .as("Verify Workers relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkersUpdatableRelationshipsEquals(Workers expected, Workers actual) {
        assertThat(expected)
            .as("Verify Workers relationships")
            .satisfies(e -> assertThat(e.getManager()).as("check manager").isEqualTo(actual.getManager()));
    }
}
